<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.simple.blog.data.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="com.simple.blog.data.entity.User">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="nickname" jdbcType="VARCHAR" property="nickname" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="avatar" jdbcType="VARCHAR" property="avatar" />
        <result column="status" jdbcType="VARCHAR" property="status" />
    </resultMap>

    <sql id="AllColumns">
        id, created_at, updated_at, username, password, nickname, email, avatar, status
    </sql>

    <insert id="save" parameterType="com.simple.blog.data.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user ( created_at, updated_at, username, password, nickname, email, avatar, status )
        VALUES (
                   #{createdAt,jdbcType=TIMESTAMP} ,
                   #{updatedAt,jdbcType=TIMESTAMP} ,
                   #{username,jdbcType=VARCHAR} ,
                   #{password,jdbcType=VARCHAR} ,
                   #{nickname,jdbcType=VARCHAR} ,
                   #{email,jdbcType=VARCHAR} ,
                   #{avatar,jdbcType=VARCHAR} ,
                   #{status,jdbcType=VARCHAR}
               )
    </insert>

    <insert id="saveAll" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user ( created_at, updated_at, username, password, nickname, email, avatar, status )
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
                #{item.createdAt,jdbcType=TIMESTAMP} ,
                #{item.updatedAt,jdbcType=TIMESTAMP} ,
                #{item.username,jdbcType=VARCHAR} ,
                #{item.password,jdbcType=VARCHAR} ,
                #{item.nickname,jdbcType=VARCHAR} ,
                #{item.email,jdbcType=VARCHAR} ,
                #{item.avatar,jdbcType=VARCHAR} ,
                #{item.status,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM user
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteByIds" parameterType="java.util.List">
        DELETE FROM user
        WHERE
        <choose>
            <when test="list==null || list.isEmpty()">
                1 = 0
            </when>
            <otherwise>
                id IN
                <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </otherwise>
        </choose>
    </delete>

    <update id="update" parameterType="com.simple.blog.data.entity.User">
        UPDATE user
        SET
            created_at = #{createdAt,jdbcType=TIMESTAMP} ,
            updated_at = #{updatedAt,jdbcType=TIMESTAMP} ,
            username = #{username,jdbcType=VARCHAR} ,
            password = #{password,jdbcType=VARCHAR} ,
            nickname = #{nickname,jdbcType=VARCHAR} ,
            email = #{email,jdbcType=VARCHAR} ,
            avatar = #{avatar,jdbcType=VARCHAR} ,
            status = #{status,jdbcType=VARCHAR}
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="AllColumns" />
        FROM user
        WHERE id = #{id,jdbcType=BIGINT}
    </select>

    <select id="findByIds" parameterType="java.util.List" resultMap="BaseResultMap">
        SELECT
        <include refid="AllColumns" />
        FROM user
        WHERE
        <choose>
            <when test="list==null || list.isEmpty()">
                1 = 0
            </when>
            <otherwise>
                id IN
                <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </otherwise>
        </choose>
    </select>

    <select id="findByUsername" resultMap="BaseResultMap">
        SELECT
        <include refid="AllColumns" />
        FROM user
        WHERE username = #{username,jdbcType=VARCHAR}
    </select>

    <select id="findByUsernameAndPassword" resultMap="BaseResultMap">
        SELECT
        <include refid="AllColumns" />
        FROM user
        WHERE username = #{username,jdbcType=VARCHAR} AND password = #{password,jdbcType=VARCHAR}
    </select>

    <select id="page" resultMap="BaseResultMap">
        SELECT
        <include refid="AllColumns" />
        FROM user
        <where>
            <if test="username != null and username !=''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="nickname != null and nickname !=''">
                AND nickname LIKE CONCAT('%', #{nickname}, '%')
            </if>
            <if test="email != null and email !=''">
                AND email LIKE CONCAT('%', #{email}, '%')
            </if>
        </where>
    </select>

</mapper>